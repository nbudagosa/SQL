-- join tables using WHERE clause
SELECT * FROM artists, albums
WHERE artists.artistid = albums.artistid;

-- using alias
SELECT * FROM artists A, albums B
WHERE A.artistid = B.artistid;





-- change from WHERE to JOIN clause
SELECT * FROM artists JOIN albums
ON artists.artistid = albums.artistid;






-- find Aerosmith, note that AS is optional clause
SELECT 
		A.artistid,
		A.Name  AS artistName,
		B.Title AS albumName,
		C.Name  AS trackName
FROM artists A
INNER JOIN albums B ON A.ArtistId = B.ArtistId
INNER JOIN tracks C ON B.AlbumId = C.AlbumId
WHERE A.Name = 'Aerosmith';





-- a little advanced query, try to read and interpret the result
SELECT 
		customers.country, 
    COUNT(DISTINCT customers.customerid) AS n_customers,
    COUNT(invoices.total) AS n_transactions,
    SUM(invoices.total)   AS total_revenue
FROM customers  
JOIN invoices 
ON customers.customerid = invoices.customerid 
GROUP BY 1 
ORDER BY 2 DESC;





-- join syntax is simple
SELECT * 
FROM tableA
JOIN tableB ON tableA.PK = tableB.FK
JOIN tableC ON tableB.PK = tableC.FK
JOIN tableD ON tableC.PK = tableD.FK;






-- create two tables
CREATE TABLE book_shop (
	id INT,
  name TEXT,
  release_year INT
);
  
CREATE TABLE favourite_book (
  id INT, 
  author TEXT,
  reviews REAL
);

INSERT INTO book_shop VALUES
  (1, 'Think Like A Freak', 2014),
  (2, 'Ultralearning', 2019),
  (3, 'Blue Ocean Strategy', 2015),
  (4, 'The Power of Habit', 2012),
  (5, 'Outliers', 2008);

INSERT INTO favourite_book VALUES
  (1, 'Steven D. Levitt, Stephen J. Dubner', 1904),
  (4, 'Charles Duhigg', 12007),
  (5, 'Malcolm Gladwell', 12063);
  
  
  
  
  
  -- review our new tabl
SELECT * FROM book_shop;
SELECT * From favourite_book;






-- inner join
SELECT * FROM book_shop A
INNER JOIN favourite_book B ON A.id = B.id; 

-- left join
SELECT * FROM book_shop A
LEFT JOIN favourite_book B ON A.id = B.id;






-- create two tables: ranks and suits
-- reference: https://www.sqlitetutorial.net/sqlite-cross-join/
CREATE TABLE ranks (
    rank TEXT NOT NULL
);

CREATE TABLE suits (
    suit TEXT NOT NULL
);

INSERT INTO ranks(rank) 
VALUES('2'),('3'),('4'),('5'),('6'),('7'),('8'),('9'),('10'),('J'),('Q'),('K'),('A');

INSERT INTO suits(suit) 
VALUES('Clubs'),('Diamonds'),('Hearts'),('Spades');






-- cross join both tables to create a full card deck
SELECT * FROM ranks 
CROSS JOIN suits ORDER BY suit;






-- create a new employee table
CREATE TABLE employee (
    id INT,
    name TEXT,
    level TEXT,
    manager_id INT 
);

INSERT INTO employee VALUES 
    (1, 'David', 'CEO', NULL),
    (2, 'John', 'SVP', 1),
    (3, 'Mary', 'VP', 2),
    (4, 'Adam', 'VP', 2),
    (5, 'Scott', 'Manager', 3),
    (6, 'Louise', 'Manager', 3),
    (7, 'Kevin', 'Manager', 4),
    (8, 'Takeshi', 'Manager', 4),
    (9, 'Joe', 'AM', 6),
    (10, 'Anna', 'AM', 7);
    
    
    
    
    
    
    -- self join in action
SELECT 
		t1.id, 
    t1.name AS employeeName, 
    t1.level AS employeeLevel,
    t2.name AS managerName,
    t2.level AS managerLevel
FROM employee t1, employee t2
WHERE t1.manager_id = t2.id;






-- intersect = which books are in both tables
SELECT id FROM book_shop
INTERSECT
SELECT id FROM favourite_book;

-- except = which books are in the left table, but not in the right tables
SELECT id FROM book_shop
EXCEPT
SELECT id FROM favourite_book;





-- create a new book shop table
CREATE TABLE book_shop_new (
  	id INT,
  	name TEXT,
	 	release_year INT
  );

INSERT INTO book_shop_new VALUES
  (6, 'Business Data Science', 2020),
  (7, 'Subliminal', 2018),
  (8, 'Good Strategy Bad Strategy', 2015);
  
  
  
  
  
-- union old and new book shop then sorted by year
SELECT * FROM book_shop
UNION ALL
SELECT * FROM book_shop_new
ORDER BY 3 DESC;




-- basic subqueries in WHERE clause
SELECT * FROM tracks 
WHERE milliseconds = (SELECT max(milliseconds) FROM tracks);

SELECT COUNT(*) FROM tracks 
WHERE milliseconds >= (SELECT AVG(milliseconds) FROM tracks);





-- another subqueries example in FROM clause
SELECT firstname, lastname, email
FROM (
		SELECT * FROM customers WHERE country = 'USA'
);
